# Visão Geral do React

## O que é React?
- React é uma biblioteca JavaScript para construção de interfaces de usuário.
- É usado para criar Aplicações de Página Única (SPAs).
- Baseado em componentes.
- Utiliza JSX para renderizar HTML.
- Aplica o virtual DOM para efetuar mudanças no DOM de forma eficiente.
- Pode ser adicionado a um projeto ou usado para criar um projeto.

## Instalação
- Para instalar o React, utilize o comando: `npx create-react-app my-app`.

## Entendendo o JSX
- JSX é semelhante ao HTML, mas dentro do código JavaScript.
- É a principal forma de escrever HTML com o React.
- Podemos interpolar variáveis, colocando-as entre `{}`.
- Funções também podem ser executadas em JSX.
- Inserir valores em atributos de tags também é válido em JSX.

## Componentes
- Permitem dividir a aplicação em partes.
- Componentes renderizam JSX, assim como App.js (que é um componente).
- Precisamos criar um arquivo de componente.
- É importante importá-lo onde precisamos usá-lo.
- Componentes geralmente são armazenados em uma pasta chamada *components*.

## Props
- Props são valores passados para componentes.
- Podemos torná-los dinâmicos.
- Ou seja, mudar a execução com base no valor da prop.
- O valor é passado como um atributo na chamada do componente.
- Precisa ser recuperado dentro de uma propriedade/argumento chamada `props` na função de definição do componente.
- Props são apenas para leitura.

## Adicionando CSS
- CSS pode ser adicionado globalmente na aplicação, por exemplo, através de `index.css`.
- No entanto, estilização a nível de componente também é possível.
- Usamos módulos CSS para isso.
- Basta criar um arquivo como `componente.module.css`.
- E importar esse CSS no componente.

## Fragmentos
- Fragments do React permitem criar um componente sem um elemento pai.
- O propósito é simplificar os nós do DOM.
- A sintaxe é `<>` e `</>`, sem um nome de tag.
- Criamos diretamente em JSX.

## Avançando em Props
- Podemos definir tipos para props, essencialmente realizando validação.
- Definimos em um objeto chamado `propTypes` dentro do próprio componente.
- Também é possível definir um valor padrão.
- Neste caso, usamos o objeto `defaultProps`.

## Eventos
- Eventos do React são os mesmos eventos do DOM.
- Ou seja, temos eventos para responder a cliques.
- O evento é vinculado a uma tag que o executará.
- Normalmente, um método é um atributo do evento.
- Esse método deve ser criado no componente.

## useState
- `useState` é um hook do React.
- Com ele, podemos gerenciar o estado de um componente facilmente.
- Esse hook funciona bem com eventos.
- Podemos vincular um evento à mudança de estado.

## Métodos via Props
- Métodos também podem ser passados via props.
- Ou seja, um componente filho pode acionar um método de seu ancestral.
- Acessamos o método por meio de um evento.
- A sintaxe é a mesma de uma propriedade de dados: `props.meuEvento`.

